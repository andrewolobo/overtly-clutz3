@model Tag4s.Data.UserContract
@using Tag4s.Helpers;
@using Tag4s.Filters;
@using Tag4s.Data
@{
    var translation = ViewBag.Translation as Dictionary<string, string>;
    var controllername = ViewBag.ControllerName as string;
    var actionname = ViewBag.ActionName as string;
    var filter = ViewBag.Filter as Tag4s.Filters.ViewFilter;
    ViewBag.Title = String.Format("{0}-{1}", Html.DisplayNameTranslatedFor("", "Edit", "Edit", ref translation), controllername.TranslateString(ref translation));
    BreadCrum.SetName(ViewBag.Title, Session);
    switch (filter.Key)
    {
        case Tag4s.Filters.ViewFilterKeys.nofilter:
        default:
            ViewBag.Title = "Contract".TranslateString(ref translation);
            break;
    }
    BreadCrum.SetName(ViewBag.Title, Session);
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm())
{
    @Html.Hidden("selectedTab", "0")
    @Html.HiddenFor(model => model.eId)
    @Html.HiddenFor(model => model.UserId)
    @Html.HiddenFor(model => model.Id)


    @Html.HiddenFor(model=>model.ContractId)

                                  @*<fieldset class="no-margin">
        <div class="row @(Html.HasErrorFor(m=>m.ContractId) ? "error" : "")" title="@Html.GetErrorMessageFor(m=>m.ContractId)">
                                      <label>
                                          @Html.DisplayNameTranslatedFor("", "Contract", "Contract", ref translation)
                                      </label>
                                      @Html.DropDownList("Contract", String.Empty)
                                  </div>
                              </fieldset>*@

                              <fieldset class="no-margin">
        <div class="row @(Html.HasErrorFor(m=>m.StartDate) ? "error" : "")" title="@Html.GetErrorMessageFor(m=>m.StartDate)">
                                      <label>
                                          @Html.DisplayNameTranslatedFor(model => model.StartDate, ref translation, TranslationTypes.Entity, controllername, actionname)
                                      </label>
                                      @Html.EditorFor(model => model.StartDate)
                                  </div>
                              </fieldset>

                              <fieldset class="no-margin">
        <div class="row @(Html.HasErrorFor(m=>m.EndDate) ? "error" : "")" title="@Html.GetErrorMessageFor(m=>m.EndDate)">
                                      <label>
                                          @Html.DisplayNameTranslatedFor(model => model.EndDate, ref translation, TranslationTypes.Entity, controllername, actionname)
                                      </label>
                                      @Html.EditorFor(model => model.EndDate)
                                  </div>
                              </fieldset>

                              <fieldset class="no-margin">
        <div class="row @(Html.HasErrorFor(m=>m.Uri) ? "error" : "")" title="@Html.GetErrorMessageFor(m=>m.Uri)">
                                      <label>
                                          @Html.DisplayNameTranslatedFor(model => model.Uri, ref translation, TranslationTypes.Entity, controllername, actionname)
                                      </label>
                                      @Html.EditorFor(model => model.Uri)
                                  </div>
                              </fieldset>
                              <fieldset class="no-margin">
        <div class="row @(Html.HasErrorFor(m=>m.Name) ? "error" : "")" title="@Html.GetErrorMessageFor(m=>m.Name)">
                                      <label>
                                          @Html.DisplayNameTranslatedFor(model => model.Name, ref translation, TranslationTypes.Entity, controllername, actionname)
                                      </label>
                                      @Html.EditorFor(model => model.Name)
                                  </div>
                              </fieldset>

                              <fieldset class="no-margin">
        <div class="row @(Html.HasErrorFor(m=>m.Actief) ? "error" : "")" title="@Html.GetErrorMessageFor(m=>m.Actief)">
                                      <label>
                                          @Html.DisplayNameTranslatedFor(model => model.Actief, ref translation, TranslationTypes.Entity, controllername, actionname)
                                      </label>
                                      @Html.CheckBoxFor(model => model.Actief)
                                  </div>
                              </fieldset>

                              <fieldset class="no-margin">
        <div class="row @(Html.HasErrorFor(m=>m.User.FullName) ? "error" : "")" title="@Html.GetErrorMessageFor(m=>m.User.FullName)">
            <label>
                @Html.DisplayNameTranslatedFor("", "Customer", "Customer", ref translation)
            </label>
            <label>
                                      @Html.DisplayFor(model => model.User.FullName)
                </label>
                                  </div>
                              </fieldset>

                              <fieldset class="no-margin">
        <div class="row @(Html.HasErrorFor(m=>m.FullUri) ? "error" : "")" title="@Html.GetErrorMessageFor(m=>m.FullUri)">
                                      <label>
                                          @Html.DisplayNameTranslatedFor("", "URL", "URL", ref translation)
                                      </label>
                                      <label>@Html.DisplayFor(model => model.FullUri)</label>
                                  </div>
                              </fieldset>

                              <fieldset class="no-margin">
        <div class="row @(Html.HasErrorFor(m=>m.QRCode) ? "error" : "")" title="@Html.GetErrorMessageFor(m=>m.QRCode)">
            <label>
                @Html.DisplayNameTranslatedFor("", "Qr-Code", "Qr-Code", ref translation)
            </label>
            <a href="@(Model.QRCode)" download="@(Model.Name??Model.eId).jpg" title="Download" target="_new">
                                      <img src=@Model.QRCode alt="QR Code" style="width: 350px; height: 350px;" width="350" height="350"/></a>
                                  </div>
                              </fieldset>

    @Html.DisplayForModel("UserContractDisplay")


    if (Model.Id != Guid.Empty)
    {
        <h2>
            @Html.DisplayNameTranslatedFor("", "UserContractUris", "UserContractUris", ref translation)
        </h2>
        @(Html.Kendo().Grid(Model.UserContractUris)
              .Name("Grid")
              //.Localizable("nl-NL")
              .ToolBar(commands => { commands.Template(c => Utilities.ActionImageWithText("Create".TranslateString(ref translation), customImages.Create, "Edit", "ContractUri", new {id = Guid.Empty, contractId = Model.Id})); })
              .DataSource(dataBinding =>
                  dataBinding
                      .Server()
                      .Model(model => model.Id(m => m.Id))
                      .PageSize(10)
                      .Sort(sortOrder => sortOrder.Add(o => o.Uri).Ascending())
              )
              .Columns(columns =>
              {
                  columns.Bound(c => c.Uri).Title("Url".TranslateString(ref translation));
                  columns.Template(c => c.UserContractRedirects.Count).Title("UserContractRedirect".TranslateString(ref translation));
                  columns.Template(navigation => Utilities.ActionImageNavigation("ContractUri", new {id = navigation.Id, contractId = Model.Id}, customImages.Edit, customImages.Delete))
                      .ClientTemplate(Utilities.ActionImageNavigation(controllername, new {id = "#=Id#", contractId = "#=Model.Id#"}, customImages.Edit, customImages.Delete).ToString()).Width(116).Title("");
              })
              .Filterable(filtering => filtering.Enabled(false))
              .Resizable(resizing => resizing.Columns(true))
              .Scrollable(scrolling => scrolling.Enabled(true).Height("auto"))
              .Pageable(paging =>
                  paging.PageSizes(new int[] {10, 25, 50, 100, 200, 1000, 2000})
                      .PreviousNext(true)
              )
              .Sortable(sorting => sorting.Enabled(true).SortMode(GridSortMode.MultipleColumn)
              )
              )
    }
    <p>
        <input type="submit" value="@Html.DisplayNameTranslatedFor("", "Save", "Save", ref translation)" />
    </p>
}

<div>
    @BreadCrum.ActionLinkStepBack(Session, ref translation)
</div>