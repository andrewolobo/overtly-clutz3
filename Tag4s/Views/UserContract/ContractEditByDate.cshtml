@model Tag4s.Data.UserContract
@using System.ServiceModel.Channels
@using System.Web.UI.WebControls
@using Tag4s.Helpers;
@using Tag4s.Data
@{
    var translation = ViewBag.Translation as Dictionary<string, string>;
    var controllername = ViewBag.ControllerName as string;
    var actionname = ViewBag.ActionName as string;
    var filter = ViewBag.Filter as Tag4s.Filters.ViewFilter;
    ViewBag.Title = String.Format("{0}-{1}", Html.DisplayNameTranslatedFor("", "ContractEditByDate", "ContractEditByDate", ref translation), controllername.TranslateString(ref translation));
    BreadCrum.SetName(ViewBag.Title, Session);
    switch (filter.Key)
    {
        case Tag4s.Filters.ViewFilterKeys.nofilter:
        default:
            ViewBag.Title = "ContractEditByDate".TranslateString(ref translation);
            break;
    }
    BreadCrum.SetName(ViewBag.Title, Session);
}

@section scripts
{
    <script type="text/javascript">



    </script>
}


<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("Edit", "UserContract"))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <fieldset class="Tag4s-fieldset">
    
        @if (Model.ContractRecipe.Code == 2)
        {
            <legend>@Html.DisplayNameTranslatedFor("", "UserContract", "UserContract", ref translation)</legend>


            @Html.HiddenFor(model => model.UserId)
            @Html.HiddenFor(model => model.ContractId)
            @Html.HiddenFor(model => model.ContractRecipeId)
            @Html.HiddenFor(model => model.eId)
        @Html.DisplayFor(m=>m, "UserContractCustom")

            if (!Model.UserContractUris.Any())
            {
                <div class="editor-label">
                    @Utilities.ActionImageWithText("Add".TranslateString(ref translation), customImages.Create, "AddUri", "UserContract", new {userContractId = Model.Id, uri = "http://www.tag4s.com"})
                </div>
            }

            var contractUriIndex = 0;
            foreach (var contractUri in Model.UserContractUris)
            {
                <input type="hidden" name="@string.Format("UserContractUris[{0}].Id", contractUriIndex)" value="@contractUri.Id"/>
                <input type="hidden" name="@string.Format("UserContractUris[{0}].UserContractRedirects[{1}].UserContractUri", contractUriIndex, 0)" value="@contractUri.Id"/>
                <input type="hidden" name="@string.Format("UserContractUris[{0}].UserContractRedirects[{1}].Id", contractUriIndex, 0)" value="@contractUri.UserContractRedirects.First().Id"/>
                @*<input type="hidden" name="@string.Format("UserContractUris[{0}].UserContractRedirects[{1}].Enabled", contractUriIndex, 0)" value="@contractUri.UserContractRedirects.First().Enabled"/>*@
                <input type="hidden" name="@string.Format("UserContractUris[{0}].UserContractId", contractUriIndex, 0)" value="@contractUri.UserContractId"/>
                <input type="hidden" name="@string.Format("UserContractUris[{0}].Name", contractUriIndex, 0)" value="@contractUri.Name"/>


                            <fieldset class="no-margin">
                    <div class="row customContract">
                        <label>
                            @Html.EditorFor(model => contractUri.UserContractRedirects.First().DateTimeValueStart, "Date", string.Format("UserContractUris[{0}].UserContractRedirects[{1}].DateTimeValueStart", contractUriIndex, 0))
                            @Html.EditorFor(model => contractUri.Enabled, "Checkbox", string.Format("UserContractUris[{0}].Enabled", contractUriIndex))
                        </label>
                        @Html.EditorFor(model => contractUri.Uri, null, string.Format("UserContractUris[{0}].Uri", contractUriIndex))
                        <a class="add-row"></a>
                        @Html.ActionLink(" ", "AddUri", "UserContract", new {userContractId = Model.Id, uri = "http://www.tag4s.com"}, new {Class = "add-row"})
                        @Html.ActionLink(" ", "DeleteUri", "UserContract", new {userContractId = Model.Id, userContractUriId = contractUri.Id}, new {Class = "remove-row"})
                    </div>
                </fieldset>

                contractUriIndex++;
            }

            <fieldset class="no-margin">
                <div class="row @(Html.HasErrorFor(m => m.Uri) ? "error" : "")" title="@Html.GetErrorMessageFor(m => m.Uri)">
                    <label>
                        @Html.DisplayNameTranslatedFor(model => model.Uri, ref translation, TranslationTypes.Entity, controllername, actionname)
                    </label>
                    @Html.EditorFor(model => model.Uri)
                </div>
            </fieldset>
            <fieldset class="no-margin">
                <div class="row @(Html.HasErrorFor(m => m.Name) ? "error" : "")" title="@Html.GetErrorMessageFor(m => m.Name)">
                    <label>
                        @Html.DisplayNameTranslatedFor(model => model.Name, ref translation, TranslationTypes.Entity, controllername, actionname)
                    </label>
                    @Html.EditorFor(model => model.Name)
                </div>
            </fieldset>
            <fieldset class="no-margin">
                <div class="row @(Html.HasErrorFor(m => m.Actief) ? "error" : "")" title="@Html.GetErrorMessageFor(m => m.Actief)">
                    <label>
                        @Html.DisplayNameTranslatedFor(model => model.Actief, ref translation, TranslationTypes.Entity, controllername, actionname)
                    </label>
                    @Html.EditorFor(model => model.Actief,"Checkbox")
                </div>
            </fieldset>

            @Html.HiddenFor(m => m.StartDate)
            @Html.HiddenFor(m => m.EndDate)

            @*
            
            <div class="editor-label">
                @Html.DisplayNameTranslatedFor(m => m.StartDate, ref translation, TranslationTypes.Entity, controllername, actionname)
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.StartDate)
            </div>

            <div class="editor-label">
                @Html.DisplayNameTranslatedFor(m => m.EndDate, ref translation, TranslationTypes.Entity, controllername, actionname)
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.EndDate)
            </div>

            <div class="editor-label">
                @Html.DisplayNameTranslatedFor(m => m.Actief, ref translation, TranslationTypes.Entity, controllername, actionname)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(m => m.Actief)
            </div>*@
        }
    </fieldset>

    <p>
        <input type="submit" value="@Html.DisplayNameTranslatedFor("", "Save", "Save", ref translation)" />
    </p>
}

<div>
    @BreadCrum.ActionLinkStepBack(Session, ref translation)
</div>